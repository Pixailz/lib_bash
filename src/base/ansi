#!/bin/bash

# Unicode char for a box
HO="\xe2\x95\x90"	# ═
VE="\xe2\x95\x91"	# ║
UL="\xe2\x95\x94"	# ╔
UR="\xe2\x95\x97"	# ╗
LL="\xe2\x95\x9a"	# ╚
LR="\xe2\x95\x9d"	# ╝

function	ansi::toggle()
{
	: "
	DESC
						Activate all color variable, and toggle ansi char
						surrounding with begin and end char, depending on mode
						and USE_ENCL_ANSI
	INFO
		LIB				ansi
		FUNCTION		toggle
	ARGS
		USE_ENCL_ANSI	${USE_ENCL_ANSI}
		[1]				mode=${1:-0}
			> activate or desactive surrounding ansi char, respectively, if mode
			  equal 0 or 1
		[2]				esc=${2:-${DEFAULT_ANSI_ESC}}
			> provide an ansi esc_char, otherwise use default
	RETURN_VALUE
		None
	"
	local	mode="${1:-0}"
	local	esc="${2:-${DEFAULT_ANSI_ESC}}"
	local	end_esc=""
	local	beg_ansi="\001"
	local	end_ansi="\002"

	if [ "${mode}" == "${USE_ENCL_ANSI}" ]; then
		echo "noting to do. returning"
		return 0
	else
		if [ "${mode}" == 1 ]; then
			esc="${beg_ansi}${esc}"
			end_esc="${end_ansi}"
		fi
	fi

	# RESET
	RST="${esc}0m${end_esc}"
	# GREEN
	G="${esc}38;5;82m${end_esc}"
	# RED
	R="${esc}38;5;196m${end_esc}"
	# BLUE
	B="${esc}38;5;75m${end_esc}"
	# YELLO
	Y="${esc}33m${end_esc}"
	# ORANGE
	O="${esc}38;5;214m${end_esc}"
	# LIGHT GREEN
	LG="${esc}92m${end_esc}"
	# LIGHT YELLOW
	LY="${esc}93m${end_esc}"
	# LIGHT BLUE
	LB="${esc}94m${end_esc}"
	# LIGHT MAGENTA
	LM="${esc}95m${end_esc}"
	# LIGHT CYAN
	LC="${esc}96m${end_esc}"

	# BLINKING
	BL="${esc}05m${end_esc}"
	# BLINKING RED
	BL_R="${BL}${R}"

	P_INFO="${LC}[INFO]${RST}"
	P_WARN="${O}[WARN]${RST}"
	P_QUES="${B}[QUE?]${RST}"
	P_PASS="${G}[PASS]${RST}"
	P_FAIL="${R}[FAIL]${RST}"
	P_ERRO="${R}[ERRO]${RST}"
	SUCCESS="[${G}+${RST}]"
	FAILED="[${R}-${RST}]"
	INFO="[${B}*${RST}]"
	WARN="[${O}*${RST}]"

	DEL_LIN="${esc}2K${end_esc}"
	MOV_1UP="${esc}1F${end_esc}"
	CLR_SCR="${esc}2J${end_esc}"
	CUR_HOME="${esc}H${end_esc}"
	MOV_BEG_DEL_LIN="${MOV_1UP}${DEL_LIN}"
	CLR_SCR_CUR_HOM="${CLR_SCR}${CUR_HOME}"
}

function	ansi::move_up_del_print()
{
	: "
	DESC
						Move up N time AND del N line, with ansi char
	INFO
		LIB				ansi
		FUNCTION		move_up_del_print
	ARGS
		[1]				msg=${1:-}
		[2]				number=${2:-1}
	RETURN_VALUE
		None
	"
	local	msg="${1:-}"
	local	number="${2:-1}"
	local	index=0

	while [ "${index}" -ne "${number}" ]; do
		printf "%b" "${MOV_BEG_DEL_LIN}"
		((index++))
	done
	printf "%b" "${msg}"
}

function	ansi::remove_color()
{
	: "
	DESC
						Set all color variable without color
	INFO
		LIB				ansi
		FUNCTION		remove
	ARGS
		None
	RETURN_VALUE
		None
	"
	G=""
	R=""
	B=""
	Y=""
	O=""
	LG=""
	LY=""
	LB=""
	LM=""
	LC=""
	BL=""
	BL_R=""
	RST=""
	P_INFO="[INFO]"
	P_WARN="[WARN]"
	P_QUES="[QUE?]"
	P_PASS="[PASS]"
	P_FAIL="[FAIL]"
	P_ERRO="[ERRO]"
	SUCCESS="[+]"
	FAILED="[-]"
	INFO="[*]"
	WARN="[*]"
}

if [ ${NO_COLOR:-0} -eq 1 ]; then ansi::remove_color; fi

USE_ENCL_ANSI=${USE_ENCL_ANSI:-None}

ansi::toggle
