#!/bin/bash

source ${DIR_INC}/.config.ansi

function	ansi::toggle_color()
{
	: "
	INFO
		LIB				ansi
		FUNCTION		toggle_surrounding
		DESC			Activate all color variable, and toggle ansi char
						surrounding with begin and end char, depending on mode
						and USE_ENCL_ANSI
		ARGS			USE_ENCL_ANSI=${USE_ENCL_ANSI}
						[1] enable=${2:-0}
							> activate or desactive color
						[1] surrounding_mode=${2:-0}
							> activate or desactive surrounding ansi char,
							if mode equal 0 or 1 respectively
						[2] esc=${3:-${DEFAULT_ANSI_ESC}}
							> provide an ansi esc_char, otherwise use default
		RETURN_VALUE	None
	"
	local	no_color="${NO_COLOR:-0}"
	local	surrounding_mode="${1:-0}"
	local	esc="${2:-${DEFAULT_ANSI_ESC}}"
	local	end_esc=""
	local	beg_ansi="\001"
	local	end_ansi="\002"

	if [ "${surrounding_mode}" -eq 1 ]; then
		esc="${beg_ansi}${esc}"
		end_esc="${end_ansi}"
	fi
	if [ "${no_color}" -eq 0 ]; then
		for key in ${!ANSI[@]}; do
			export "${key}"="${esc}${ANSI[${key}]}${end_esc}"
		done
	else
		for key in ${!ANSI[@]}; do
			export "${key}"=""
		done
	fi

	# COMPOSITE

	BL_R="${BL}${R}"

	P_INFO="${LC}[INFO]${RST}"
	P_WARN="${O}[WARN]${RST}"
	P_QUES="${B}[QUE?]${RST}"
	P_PASS="${G}[PASS]${RST}"
	P_FAIL="${R}[FAIL]${RST}"
	P_ERRO="${R}[ERRO]${RST}"

	SUCCESS="[${G}+${RST}]"
	FAILED="[${R}-${RST}]"
	INFO="[${B}*${RST}]"
	WARN="[${O}*${RST}]"

	MOV_BEG_DEL_LIN="${MOV_1UP}${DEL_LIN}"
	CLR_SCR_CUR_HOM="${CLR_SCR}${CUR_HOME}"
}

function	ansi::move_up_del_print()
{
	: "
	INFO
		LIB				ansi
		FUNCTION		move_up_del_print
		DESC			Move up N time AND del N line, with ansi char
		ARGS			[1] msg=${1:-}
						[2] number=${2:-1}
		RETURN_VALUE	None
	"
	local	msg="${1:-}"
	local	number="${2:-1}"
	local	index=0

	while [ "${index}" -ne "${number}" ]; do
		printf "%b" "${MOV_BEG_DEL_LIN}"
		((index++))
	done
	printf "%b" "${msg}"
}

ansi::toggle_color
