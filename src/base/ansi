#!/bin/bash

function	ansi::toggle_color()
{
	: "
	INFO
		LIB				ansi
		FUNCTION		toggle_surrounding
		DESC			Activate all color variable, and toggle ansi char
						surrounding with begin and end char, depending on mode
						and USE_ENCL_ANSI
		ARG				USE_ENCL_ANSI=
						[1] surrounding_mode=${1:-${USE_ENCL_ANSI}}
							> activate or desactive surrounding ansi char,
							if mode equal 0 or 1 respectively
						[2] esc=${2:-${DEFAULT_ANSI_ESC}}
							> provide an ansi esc_char, otherwise use default
	"
	local	no_ansi="${NO_ANSI:-0}"
	local	surrounding_mode="${1:-${USE_ENCL_ANSI}}"
	local	esc="${2:-${DEFAULT_ANSI_ESC}}"
	local	end_esc=""

	if [ "${surrounding_mode}" -eq 1 ]; then
		esc="${BEG_ANSI}${esc}"
		end_esc="${END_ANSI}"
	fi
	if [ "${no_ansi}" -eq 0 ]; then
		for key in ${!ANSI[@]}; do
			export "${key}"="${esc}${ANSI[${key}]}${end_esc}"
		done
	else
		for key in ${!ANSI[@]}; do
			export "${key}"=""
		done
	fi

	# COMPOSITE

	BL_R="${BL}${R}"

	P_INFO="[${LC}INFO${RST}]"
	P_WARN="[${O}WARN${RST}]"
	P_QUES="[${B}QUES${RST}]"
	P_PASS="[${G}PASS${RST}]"
	P_FAIL="[${R}FAIL${RST}]"
	P_ERRO="[${R}ERRO${RST}]"
	P_USAGE="[${G}USAG${RST}]"

	SUCCESS="[${G}+${RST}]"
	FAILED="[${R}-${RST}]"
	INFO="[${B}*${RST}]"
	WARN="[${O}*${RST}]"

	MOV_BEG_DEL_LIN="${MOV_1UP}${DEL_LIN}"
	CLR_SCR_CUR_HOM="${CLR_SCR}${CUR_HOME}"

	# OTHER LIB
	PB_COLOR="${R}"
	LOG_TITLE_DEFAULT_COLOR="${G}"
	DOWN_COLOR="${O}"
	LOAD_COLOR="${C}"
}

function	ansi::move_up_del_print()
{
	: "
	INFO
		LIB				ansi
		FUNCTION		move_up_del_print
		DESC			Move up N time AND del N line, with ansi char
		ARG				[1] msg=${1:-}
						[2] number=${2:-1}
	"
	local	msg="${1:-}"
	local	number="${2:-1}"
	local	index=0

	while [ "${index}" -ne "${number}" ]; do
		printf "%b" "${MOV_BEG_DEL_LIN}"
		((index++))
	done
	printf "%b" "${msg}"
}

function	ansi::print_col()
{
	: "
	INFO
		LIB				ansi
		FUNCTION		print_col
		DESC			move to the N column and print a msg
		ARG				[1] msg=${1:-}
						[2] col=${2:-0}
	"
	local	msg="${1:-}"
	local	col="${2:-0}"

	ansi::set_cursor_pos "${col}"
	printf "%b" "${msg}"
}

function	ansi::set_cursor_pos()
{
	: "
	INFO
		LIB				ansi
		FUNCTION		set_cursor_pos
		DESC			move cursor at X or Y or both, pos on the screen
		ARG				[1] pos_x=${1:-}
						[2] pos_y=${2:-}
	"
	local	pos_x="${1:-}"
	local	pos_y="${2:-}"
	local	cur_pos_x
	local	cur_pos_y

	if [ ! -z "${pos_x}" -a -z "${pos_y}" ]; then
		ansi::get_cursor_pos
		pos_x="${pos_x}"
		pos_y="${CUR_POS_Y}"
	elif [ ! -z "${pos_y}" -a -z "${pos_x}" ]; then
		ansi::get_cursor_pos
		pos_x="${CUR_POS_X}"
		pos_y="${pos_y}"
	elif [ -z "${pos_x}" -a -z "${pos_y}" ]; then
		ansi::get_cursor_pos
		pos_x="${CUR_POS_X}"
		pos_y="${CUR_POS_Y}"
	else
		pos_x="${pos_x}"
		pos_y="${pos_y}"
	fi
	ansi::print "${pos_y};${pos_x}H"
}

function	ansi::get_cursor_pos()
{
	: "
	INFO
		LIB				ansi
		FUNCTION		get_cursor_pos
		DESC			retrieve cursor pos from tty
		RETURN_VALUE	CUR_POS_X
						CUR_POS_Y
	"
	local	oldstty

	exec < /dev/tty
	oldstty=$(stty -g)
	stty raw -echo min 0
	tput u7
	IFS=';' read -r -d R -a pos
	stty "${oldstty}"
	CUR_POS_X=$((${pos[1]}))
	CUR_POS_Y=$((${pos[0]:2}))			# strip off the esc-[
}

function	ansi::print()
{
	: "
	INFO
		LIB				ansi
		FUNCTION		print
		DESC			print ansi code
		ARG				[1] code=${1}
						[2] esc=${2:-${DEFAULT_ANSI_ESC}}
	"
	local	code="${1}"
	local	esc="${2:-${DEFAULT_ANSI_ESC}}"
	local	end_esc=""

	if [ "${USE_ENCL_ANSI}" -eq 1 ]; then
		esc="${BEG_ANSI}${esc}"
		end_esc="${END_ANSI}"
	fi
	printf "%b" "${esc}${code}${end_esc}"
}

function	ansi::down()
{
	: "
	INFO
		LIB				ansi
		FUNCTION		down
		DESC			animation for downloading, at pos x,y
		ARG				[1] title=${1:-}
						[2] mode=${2:-0}
							> could be either 1 or 0, right to left or left
							to right
						[3] pos_x=${3:-0}
						[4] pos_y=${4:-}
							> if arg not provided, set pos_y to the CUR_POS_Y
							returned by ansi::get_cursor_pos
	"
	local	title="${1:-}"
	local	mode="${2:-0}"
	local	pos_x="${3:-0}"
	local	pos_y="${4:-}"
	local	curr_char_var="DOWN_00"

	if [ -z "${pos_y}" ]; then
		ansi::get_cursor_pos
		pos_y="${CUR_POS_Y}"
	fi
	((pos_x++))
	ansi::set_cursor_pos "$((${pos_x} + 1))" "${pos_y}"
	printf "${title}"
	ansi::print "${ANSI["DIS_CUR"]}"
	trap "ansi::print '${ANSI['ENA_CUR']}\n'; exit" SIGINT SIGQUIT
	ansi::set_cursor_pos "${pos_x}" "${pos_y}"
	while true; do
		case ${curr_char_var} in
			DOWN_00)  curr_char_var="DOWN_1${mode}" ;;
			DOWN_1*) curr_char_var="DOWN_20" ;;
			DOWN_20)  curr_char_var="DOWN_3${mode}" ;;
			DOWN_3*) curr_char_var="DOWN_40" ;;
			DOWN_40)  curr_char_var="DOWN_5${mode}" ;;
			DOWN_5*) curr_char_var="DOWN_60" ;;
			DOWN_60)  curr_char_var="DOWN_7${mode}" ;;
			DOWN_7*) curr_char_var="DOWN_80" ;;
			DOWN_80)  curr_char_var="DOWN_00" ;;
		esac
		printf "%b" "${DOWN_COLOR}${!curr_char_var}${RST}"
		ansi::print "1D"
		sleep ${DOWN_TTS}
	done
	ansi::print "${ANSI["ENA_CUR"]}"
	trap - SIGINT SIGQUIT
}

function	ansi::load()
{
	: "
	INFO
		LIB				ansi
		FUNCTION		load
		DESC			animation for downloading, at pos x,y
		ARG				[1] title=${1:-}
						[2] pos_x=${2:-0}
						[3] pos_y=${3:-}
							> if arg not provided, set pos_y to the CUR_POS_Y
							returned by ansi::get_cursor_pos
	"
	local	title="${1:-}"
	local	pos_x="${2:-0}"
	local	pos_y="${3:-}"
	local	curr_char_var="LOAD_0"

	printf "posy : %s\n" ${pos_y} >> pos
	ansi::set_cursor_pos "${pos_x}" "${pos_y}"
	printf "  ${title}"
	while true; do
		# ansi::set_cursor_pos "${pos_x}" "${pos_y}"
		case ${curr_char_var} in
			LOAD_0) curr_char_var="LOAD_1" ;;
			LOAD_1) curr_char_var="LOAD_2" ;;
			LOAD_2) curr_char_var="LOAD_3" ;;
			LOAD_3) curr_char_var="LOAD_4" ;;
			LOAD_4) curr_char_var="LOAD_5" ;;
			LOAD_5) curr_char_var="LOAD_6" ;;
			LOAD_6) curr_char_var="LOAD_7" ;;
			LOAD_7) curr_char_var="LOAD_0" ;;
		esac
		printf "%b" "${LOAD_COLOR}${!curr_char_var}${RST}"
		ansi::print "1D"
		sleep ${LOAD_TTS}
	done
}

ansi::toggle_color
