#!/bin/bash

function	utils::ask()
{
	: "
	INFO
		LIB				base
		FUNCTION		ask
		DESC			My version of ask (http://djm.me/ask)
		ARG				[1] message=${1}
							> question to ask
						[2] default=${2:-NULL}
							> default value to return
		RETURN_VALUE	1 if user agree, 0 if not. if DEFAULT is not NULL and
						choice is not y or n, DEFAULT is returned
	"
	local message=$1
	local default=${2:-NULL}
	local choice=""

	while true; do
		# set default prompt according to $default
		if [ ${default} == "y" ]; then
			print::ques "${message} (Y/n)  " 1
		elif [ ${default} == "n" ]; then
			print::ques "${message} (y/N)  " 1
		else
			print::ques "${message} (y/n)  " 1
		fi
		# read on char
		read -n 1 choice
		# make char lower
		choice="${choice,,}"
		# if choice is not empty, print return line
		[ ${choice} ] && printf "\x0a"
		case ${choice} in
			y) return 1 ;;
			n) return 0 ;;
			*)  if [ "${default}" == 'y' ]; then
					return 1
				elif [ "${default}" == 'n' ]; then
					return 0
				else
					print::warn "[${choice}] wrong choice (y|n)"
				fi
				;;
		esac
	done
}

function	utils::choice()
{
	: "
	INFO
		LIB				utils
		FUNCTION		choice
		DESC			prompt for all choice, read for user input. if correct
						index is provided or q, to return, then return choice.
						otherwise re prompt for a good choice
		ARG				[1] title=${1:-None}
						[2] return_title=${2:-Return}
							> str to print for 'returning'
						[@:3] tmp=${@:3}
							> from the 3 to the last argument provided
		RETURN_VALUE	index or 255 for returning
	"
	local	title="${1:-None}"
	local	return_title="${2:-Return}"
	local	tmp="${@:3}"
	local	choice
	declare -a choices=(${tmp})
	local	choices_length="${#choices[@]}"
	local	choice_length="${#choices_length}"
	local	index
	local	index_plus_one
	local	padding

	while true; do
		printf "%b" "${title}"
		index=0
		for item in "${choices[@]}"; do
			let "index_plus_one=index+1"
			printf "\t[${RED}%0${choice_length}d${RST}] %b\n" "${index_plus_one}" "${item}"
			index="${index_plus_one}"
		done
		printf "\n\t[${RED}q${RST}]%s\n\n" "${return_title}"
		read -p "choice> "		\
			 -n "${choice_length}"	\
			 choice
		printf "\x0a"
		if [[ ${choice} =~ ^[0-9]+$ ]]; then
			if [ "${choice}" -ge 1 -a "${choice}" -le "${choices_length}" ]; then
				return ${choice}
			else
				case "${choice_length}" in
					1) padding="";;
					2) padding="0";;
					3) padding="00";;
				esac
				print::erro "wrong choice, choose between (${padding}1-${choices_length})"
				print::pause
			fi
		elif [ "${choice,,}" == "q" ]; then
			return 255
		else
			print::erro "wrong choice, choose a numeric number or q to return"
			print::pause
		fi
	done
}

function	utils::move_file()
{
	: "
	INFO
		LIB				utils
		FUNCTION		move_file
		DESC			move a file from src to dst, ask for overwriting if it
						exist
		ARG				[1] src=${1}
						[2] dst=${2}
	"
	local	src="${1}"
	local	dst="${2}"
	local	dst_folder="${2%/*}"
	local	tmp
	local	do_copy=1

	if [ "${FORCE_MOVE:-}" != "1" ] && [ -f "${dst}" ]; then
		utils::ask "file ${RED}${2##*/}${RST} exist, do you wan't to overwrite it" "y"
		[ "${?}" == 0 ] && do_copy=0
	fi
	if [ "${do_copy}" == 1 ]; then
		if [ ! -d "${dst_folder}" ]; then
			log::warn "folder ${ORA}.${dst_folder}${RST} don't exist, creating" 0 1
			mkdir -p "${dst_folder}"
		fi
		cp -rf "${src}" "${dst}"
		if [ "${?}" == 0 ]; then
			log::pass "copied ${GRE}.${src/${DIR_MODULE}/}${RST} to ${GRE}${dst}${RST}." 0 1
		else
			log::fail "copy ${RED}failed${RST}." 0 1
		fi
	else
		log::warn "configuration ${ORA}skiped${RST}." 0 1
	fi
}

function	utils::move_dir()
{
	: "
	INFO
		LIB				utils
		FUNCTION		move_dir
		DESC			move a dir from src to dst, ask for overwriting if it
						exist. if in_folder i y, don't take src folder as base,
						but src/*
		ARG				[1] src=${1?}
						[2] dst=${2?}
						[3] in_folder=${3}
	"
	local	src="${1}"
	local	dst="${2}"
	local	in_folder="${3:-n}"
	local	tmp
	local	do_copy=1

	if [ "${FORCE_MOVE:-}" != "1" ] && [ -d "${dst}" ]; then
		utils::ask "file ${RED}${2##*/}${RST} exist, do you wan't to overwrite it" "y"
		[ "${?}" == 0 ] && do_copy=0
	fi
	if [ "${do_copy}" == 1 ]; then
		if [ ! -d "${dst}" ]; then
			log::warn "folder ${ORA}.${dst}${RST} don't exist, creating" 0 1
			mkdir -p "${dst}"
		fi
		if [ "${in_folder}" == "y" ]; then
			for dir in $(/usr/bin/ls -A "${src}"); do
				cp -rf "${src}/${dir}" "${dst}";
			done
		else
			cp -rf ${src[@]} "${dst}"
		fi
		if [ "${?}" == 0 ]; then
			log::pass "copied ${GRE}.${src/${PWD}/}${RST} to ${GRE}${dst}${RST}." 0 1
		else
			log::fail "copy ${RED}failed${RST}." 0 1
		fi
	else
		log::warn "configuration ${ORA}skiped${RST}." 0 1
	fi
}

function	utils::mkdir()
{
	: "
	INFO
		LIB				utils
		FUNCTION		mkdir
		DESC			make a dir at specified path, if path is a file then
						remove it, and the create the path
		ARG				[1] dir_path=${1}
	"
	local	dir_path="${1}"

	[ -f "${dir_path}" ] && rm -f "${dir_path}"
	[ ! -d "${dir_path}" ] && mkdir -p "${dir_path}"
}

function	utils::update_repo()
{
	: "
	INFO
		LIB				utils
		FUNCTION		update_repo
		DESC			update a repo given a path
		ARG				[1] git_link=${1}
						[2] dst_dir=${2}
	"
	local	git_link="${1}"
	local	git_repo="${git_link/*\/}"
	local	git_user="${git_link/\/${git_repo}}"
	local	dst_dir="${2}"
	local	git_user
	local	current_branch
	local	current_commit_id
	local	latest_commit_id

	if [ "$(head -c3 <<<"${git_link}")" == "git" ]; then
		git_user="${git_user/git@github.com:}"
	else
		git_user="${git_user/https:\/\/github\.com\/}"
	fi
	print::info "Checking if (${LCYA}${dst_dir}/${git_repo}${RST}) is updated "
	if [ -d "${dst_dir}/${git_repo}" ]; then
		cd "${dst_dir}/${git_repo}"
		current_branch=$(git rev-parse --abbrev-ref HEAD)
		current_commit_id=$(git rev-parse HEAD)
		latest_commit_id=$(curl -# -H "Accept: application/vnd.github.VERSION.sha" \
			https://api.github.com/repos/${git_user}/${git_repo}/commits/${current_branch})
		if [ "${current_commit_id}" != "${latest_commit_id}" ]; then
			print::warn "Not up-to-date, updating"
			git reset --hard "origin/${current_branch}" && git pull ; true
			print::info "Relaunch the script to make the update effective"
		else
			print::pass "Already up-to-date (${LCYA}${current_commit_id::7}${RST})"
		fi
		cd - 1>/dev/null
	else
		cd "${dst_dir}"
		print::info "Repo not found, cloning it."
		git clone "${git_link}"
		cd - 1>/dev/null
	fi
}

function	dry::run()
{
	: "
	INFO
		LIB				dry
		FUNCTION		run
		DESC			print or exec a command, given the DRY_RUN env value
		ARG				[@] cmd=${@?}
	"
	if [ "${DRY_RUN:-}" ]; then
		echo -e "${P_DRY_RUN}: $(tr '\n' ' ' <<< ${*})"
	else
		${@}
		return ${?}
	fi
}

function	is::available()
{
	: "
	INFO
		LIB				is
		FUNCTION		available
		DESC			check whether a command is available
		ARG				[1] command_name=${1?}
		RETURN			0 on success, 1 on failure
	"
	local	command_name="${1}"
	local	filter="${2:-}"
	local	out
	out="$(type -t "${command_name}")"

	[ "${out}" != "" ] && echo 1 && return 0
	[ "${out}" == "${filter}" ] && echo 1 && return 0
	echo 0; return 1
}

function curl::wrap()
{ dry::run curl --location --progress-bar "${1}" --output "${2}"; }
