#!/bin/bash

function	parse::print_usage()
{
	: "
	INFO
		LIB				parse
		FUNCTION		print_usage
		DESC			print line for parse::usage function
		ARG				PARSE_COL_LONG=${PARSE_COL_LONG}
							> position of the long argument
						PARSE_COL_DESC=${PARSE_COL_DESC}
							> position of the description
						[1] opt_short=${1:-}
						[2] opt_long=${2:-1}
						[3] desc=(${@:3})
	"
	local		opt_short="${1:-}"
	local		opt_long="${2:-}"
	local		desc=(${@:3})

	[ ! -z "${opt_short}" ] && printf "        -%s," "${opt_short}"
	ansi::set_cursor_pos ${PARSE_COL_LONG}
	[ ! -z "${opt_long}" ] && printf "--" "--" && printf "%s" "${opt_long}"
	for line in ${desc[@]}; do
		ansi::print_col "${line}\n" ${PARSE_COL_DESC}
	done
}

function	parse::print_infos()
{
	: "
	INFO
		LIB				parse
		FUNCTION		print_infos
		DESC			print infos about the script
	"

	printf "${SUCCESS} Author: "
	ansi::print_col "${SCRIPT_AUTHOR}\n" "${PARSE_COL_LAST_SEC}"
	printf "${SUCCESS} Version:"
	ansi::print_col "${SCRIPT_VERSION}\n" "${PARSE_COL_LAST_SEC}"
	if [ ! -z ${SCRIPT_LASTUPDATED:-} ]; then
		printf "${SUCCESS} Last updated:"
		ansi::print_col "${SCRIPT_LASTUPDATED}\n" "${PARSE_COL_LAST_SEC}"
	fi
	printf "${SUCCESS} See Also:"
	ansi::print_col "${SCRIPT_LINK}\n" "${PARSE_COL_LAST_SEC}"
}

function	parse::usage()
{
	: "
	INFO
		LIB				parse
		FUNCTION		usage
		DESC			print usage and exit with non zero
	"
	printf "%b: ${SCRIPT_NAME} " "${P_USAGE}"
	printf "[-hv]\n\n"
	printf "    1. Base\n"
	parse::print_usage "h" "help" "Display the help then exit."
	parse::print_usage "" "version" "Display the version then exit."
	parse::print_usage "" "no-color" "disable all color"
	parse::print_usage "v" "" "Set verbose mode to 1 (Normal)"
	parse::print_usage "vv" "" "Set verbose mode to 2 (Include)"
	parse::print_usage "vvv" "" "Set verbose mode to 3 (Not used)"
	printf "\x0a"
	parse::print_infos
	exit
}

function	parse::version()
{
	: "
	INFO
		LIB				parse
		FUNCTION		version
		DESC			print version and exit
	"
	printf "${SUCCESS} Version:"
	ansi::print_col "${SCRIPT_VERSION}\n" "${PARSE_COL_LAST_SEC}"
	exit
}

function	parse::entry()
{
	: "
	INFO
		LIB				parse
		FUNCTION		entry
		DESC			parse args according
		ARG				SCRIPT_NAME=${SCRIPT_NAME}
						PARSE_OPT_SHORT=${PARSE_OPT_SHORT}
						PARSE_OPT_LONG=${PARSE_OPT_LONG}
						PARSE_FUNC_VERSION=${PARSE_FUNC_VERSION}
						PARSE_FUNC_HELP=${PARSE_FUNC_HELP}
		RETURN_VALUE	return set or not set variable, according to your use
						REQUIRED
						OPTIONAL
						DEBUG
						NO_ANSI
	"
	local	args="${@}"

	TEMP=$(getopt --name "${SCRIPT_NAME}"										\
				  --alternative													\
				  --shell bash													\
				  --options ${PARSE_OPT_SHORT}									\
				  --longoptions ${PARSE_OPT_LONG}								\
				  -- "${args}"													)

	eval set -- "${TEMP}"
	unset TEMP
	while true; do
		case "${1:-}" in
			'--version') ${PARSE_FUNC_VERSION} ; exit ;;
			'-h'|'--help') ${PARSE_FUNC_HELP} ; exit ;;
			'--no-color') NO_ANSI=1;;
			'--required-opt')
				print::info "set-var"
				shift
				REQUIRED=${1:-DEFAULT_VALUE}
			;;
			'--optional-opt')
				print::info "set-var"
				shift
				OPTIONAL=${1:-DEFAULT_VALUE}
			;;
			'-v') DEBUG=1 ;;
			'--vv') DEBUG=2 ;;
			'--vvv') DEBUG=3 ;;
			'--')
				shift
				break
			;;
			*)
				print::warn "Internal error"
				break
			;;
		esac
		shift
	done
	print::info "Remaining args"
	while [ -v 1 ]  && [ ! -z "${1}" ]; do
		print::info "${1}"
		shift
	done
}

